#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
This file is part of osdoc.

osdoc is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

osdoc is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with osdoc.  If not, see <http://www.gnu.org/licenses/>.
"""

import os
import sys
import yaml
import shutil
import subprocess
from md5 import md5
from optparse import OptionParser

def getInfo(path):
	
	"""
	Retrieves YAML info from a Markdown document.
	
	Arguments:
	path	--	The path to the document.
	
	Returns:
	A dictionary with YAML info.
	"""
	
	s = open(path).read().decode(u'utf-8')
	l = s.split(u'---')
	if len(l) < 3:
		print u'getInfo(): Failed to parse %s' % path
		return None
	y = yaml.load(l[1])
	return y

def setInfo(path, i):
	
	"""
	Modifies the YAML infor inside a Markdown document. The file is not modified
	directly, but returned as a string.
	
	Arguments:
	path	--	The patch to the document.
	i		--	A dictionary with the YAML info.
	
	Returns:
	A string with the modified document.
	"""
	
	# Sortkey has to be string, otherwise it will not be parsed correctly by
	# yaml
	s = open(path).read().decode(u'utf-8')
	l = s.split(u'---')
	if len(l) < 3:
		return None
	yml = u''
	for key, value in i.iteritems():
		yml += u'%s: %s\n' % (key, value)	
	l[1] = yml
	s = u'---\n' + u'---'.join(l[1:])	
	return s

def listContent(dirname=u'content', l=[]):
	
	"""
	Lists all content files in a given directory.
	
	Keyword arguments:
	dirname		--	The content directory or None to use the last command line
					parameter. (default=None)
	l			--	A list to append the files to (for recursion purposes).
					(default=[])
	
	Returns:
	A list of all content Markdown files.
	"""
	
	for basename in os.listdir(dirname):			
		if basename.startswith(u'_'):
			continue		
		path = os.path.join(dirname, basename)
		if os.path.isdir(path):
			l = listContent(dirname=path, l=l)
		elif basename.endswith(u'.md'):
			i = getInfo(path)
			if i != None:
				l.append((path, i))
				print path
	return l

def parseImages(path, yaml, s):
	
	"""
	Parses `::fig_name::fig_caption` style images and converts this to
	Markdown syntax. In addition, the figures are copied to hashed paths.
	
	Arguments:
	path	--	The path to the page.
	yaml	--	The page's YAML front matter.
	s		--	A string with the page content.
	
	Returns:
	A string with the parsed page contents.
	"""
	
	lines = s.split(u'\n')
	i = 0
	n = 1
	for l in lines:
		if l.startswith(u'::'):
			r = l.split(u'::')
			if len(r) == 1:
				raise Exception(u'Failed to parse lines "%s"' % l)
			hashPath = os.path.join(u'_content', 'img', \
				md5(path+yaml['permalink']+str(n)).hexdigest() + \
					os.path.splitext(r[1])[1])
			srcPath = os.path.join(path, u'img', yaml['permalink'][1:], r[1])
			print '\t\t', srcPath, '=>', hashPath
			shutil.copyfile(srcPath, hashPath)
			lines[i] = u'![](/img/%s)' % os.path.basename(hashPath)
			if len(r) > 1:
				lines[i] += u'\n\n__Fig. %d.__ %s\n{: .fig-caption}\n' \
					% (n, r[2])
			n += 1
		i += 1
	return u'\n'.join(lines)

if __name__ == u'__main__':
	
	# Parse command line options
	parser = OptionParser()
	parser.add_option(u'-n', u'--nojekyll', dest=u'jekyll', help= \
		u'Do not generate site with Jekyll', action=u'store_false', \
		default=True)
	parser.add_option(u'-c', u'--check-links', dest=u'checkLinks', help= \
		u'Check for dead links', action=u'store_true', \
		default=True)
	parser.add_option(u'-g', u'--group', dest=u'group', help= \
		u'Only parse a specific group', default=None)
	parser.add_option(u'-s', u'--sitemap', dest=u'sitemap', help= \
		u'Indicate sitemap file', default=u'sitemap.txt')
	parser.add_option(u'--src', dest=u'src', help= \
		u'Source folder', default=u'content')
	parser.add_option(u'--target', dest=u'target', help= \
		u'Target folder', default=u'_content')
	options, args = parser.parse_args()
	
	src = options.src
	target = options.target
		
	# Recreate the target folder
	print u'\nRecreating target folder (%s)...' % target
	if os.path.exists(target):
		shutil.rmtree(target)
	os.mkdir(target)
	
	# Copy all non-page resources
	print u'\nCopying non-page resources ...'
	shutil.copytree(u'%s/_includes' % src, u'%s/_includes' % target)
	shutil.copytree(u'%s/_layouts' % src, u'%s/_layouts' % target)
	shutil.copytree(u'%s/stylesheets' % src, u'%s/stylesheets' % target)
	shutil.copytree(u'%s/attachments' % src, u'%s/attachments' % target)
	shutil.copytree(u'%s/img' % src, u'%s/img' % target)
	shutil.copy(u'%s/favicon.ico' % src, u'%s/favicon.ico' % target)
		
	print u'\nListing content ...'
	content = listContent()
	
	print u'\nCompiling pages ...'
	sortkey = [0,0]
	group = 'General'
	sitemap = open(options.sitemap.encode(sys.getfilesystemencoding())).read() \
		.decode(u'utf-8')
	for title in sitemap.split(u'\n'):
		if title.startswith(u'#') or title.strip() == u'':
			continue
		if title.startswith(u'\t'):
			sortkey[1] += 1
			level = 1
		else:
			sortkey[0] += 1
			level = 0			
		title = title.strip()
		if title.startswith(u':'):
			show = False
			title = title[1:]
		else:
			show = True
		i = 0
		for path, yaml in content:
			if yaml[u'title'].lower() == title.lower():
				targetPath = u'_' + path
				if level > 0:
					print u'\t',
				else:
					group = yaml[u'group']
				print '-> %s' % title
				yaml[u'show'] = show
				yaml[u'sortkey'] = u'%.3d.%.3d' % (sortkey[0], sortkey[1])
				yaml[u'level'] = level
				yaml[u'group'] = group
				if options.group == None or group.lower() == \
					options.group.lower() or title.lower() == u'home':
					s = setInfo(path, yaml)
					s = parseImages(os.path.dirname(path), yaml, s)
					if not os.path.exists(os.path.dirname(targetPath)):
						os.mkdir(os.path.dirname(targetPath))
					open(targetPath.encode(sys.getfilesystemencoding()), \
						u'w').write(s.encode(u'utf-8'))
				i += 1
		if i > 1:
			raise Exception(u'Multiple matches for "%s"' % title)
		if i == 0:
			raise Exception(u'Failed to find "%s"' % title)

	# Optionally generate the site with jekyll
	if options.jekyll:
		print u'\nLaunching jekyll'	
		subprocess.call([u'jekyll'])
		
	# Optionally check for dead links
	if options.checkLinks:
		print u'\nChecking for dead links'		
		cmd = [u'linkchecker', u'--no-warnings', u'-o', u'csv', \
			u'http://localhost:8000']
		subprocess.call(cmd, stdout=open(u'deadlinks.log', u'w'))		
		nErr = 0		
		for l in open(u'deadlinks.log').read().split(u'\n')[4:]:
			r = l.split(u';')	
			if len(r) < 6 or r[0] == u'urlname':
				continue
			url = r[0]
			# Don't check index.pdf pages, as they are generated later on, and
			# don't check e-mail addresses.
			if url.endswith(u'index.pdf') or url.startswith(u'mailto:'):
				continue
			parent = r[1]
			warning = r[3]
			valid = r[5] == u'False'	
			nErr += 1
			print '%s\n\tin %s' % (url, parent)
		print u'%d dead link(s) found' % nErr