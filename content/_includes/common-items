<p>The ‘common items’ are the ten items that appear at the top of the item toolbar and provide the basic functionality required to build an experiment. The documentation shown below is identical to the context-sensitive help pages that you can access in OpenSesame by clicking on the help icon at the top-right of the tab area.</p>
<h2 id="overview">Overview</h2>
<ul>
<li><a href="#sequence-items">Sequence items</a>
<ul>
<li><a href="#sequences-are-sequential"><code>Sequence</code>s are sequential</a></li>
<li><a href="#appending-items-to-the-sequence">Appending items to the sequence</a></li>
<li><a href="#run-if-statements">Run-if statements</a></li>
</ul></li>
<li><a href="#loop-items">Loop items</a>
<ul>
<li><a href="#the-loop-table">The <code>loop</code> table</a></li>
<li><a href="#using-python-functions">Using Python functions</a></li>
<li><a href="#convenient-ways-of-creating-a-large-loop-table">Convenient ways of creating a large loop table</a></li>
</ul></li>
<li><a href="#sketchpad-items">Sketchpad items</a>
<ul>
<li><a href="#duration">Duration</a></li>
<li><a href="#show-if-statements">Show-if statements</a></li>
<li><a href="#sketchpads-are-prepared-in-advance-feedback-items-are-not"><code>Sketchpad</code>s are prepared in advance, <code>feedback</code> items are not</a></li>
</ul></li>
<li><a href="#feedback-items">Feedback items</a></li>
<li><a href="#sampler-items">Sampler items</a></li>
<li><a href="#sampling-rate">Sampling rate</a></li>
<li><a href="#synth-items">Synth items</a></li>
<li><a href="#keyboard_response-items">Keyboard_response items</a>
<ul>
<li><a href="#options">Options</a></li>
<li><a href="#variables-set-by-keyboard_response">Variables set by <code>keyboard_response</code></a></li>
<li><a href="#names-of-keys">Names of keys</a></li>
</ul></li>
<li><a href="#mouse_response-items">Mouse_response items</a>
<ul>
<li><a href="#names-of-mouse-buttons">Names of mouse buttons</a></li>
</ul></li>
<li><a href="#logger-items">Logger items</a>
<ul>
<li><a href="#selecting-variables">Selecting variables</a></li>
<li><a href="#options">Options</a></li>
<li><a href="#format-of-the-logfile">Format of the logfile</a></li>
</ul></li>
<li><a href="#inline_script-items">Inline_script items</a></li>
</ul>
<h2 id="sequence-items">Sequence items</h2>
<p>In an experiment you often have a number of events that occur sequentially. For example, in a trial, you may present a fixation point, followed by a number of stimulus displays, followed in turn by response collection and response logging. This is where the <code>sequence</code> item comes in.</p>
<h3 id="sequences-are-sequential"><code>Sequence</code>s are sequential</h3>
<p><code>sequence</code>s are run from top to bottom, i.e. the first item is the item that is presented at the top. You can change the order of the <code>sequence</code> by picking up items by their grab handle (on the left) and dragging them to a new position. You can remove items from a <code>sequence</code> by right-clicking on an item and selecting ‘Delete’.</p>
<h3 id="appending-items-to-the-sequence">Appending items to the sequence</h3>
<p>You can add items to a <code>sequence</code> by clicking on the buttons at the bottom of the tab. The <em>Append existing item</em> button appends an existing item to the sequence table, without creating a new item. This way you can add a single item (a fixation dot display, say) multiple times to a <code>sequence</code>. The <em>Append new item</em> button creates a new item and appends it to the <code>sequence</code>.</p>
<h3 id="run-if-statements">Run-if statements</h3>
<p>A very convenient feature of the sequence item is that you can use conditional (‘if’) statements. For example, if you want a display to be presented only if a participant has made an incorrect response, you can set the Run-if statement to</p>
<pre><code>[correct] = 0</code></pre>
<p>If you leave the Run-if statement empty or enter ‘always’, the item will always be called.</p>
<p>For more information, see also:</p>
<ul>
<li><a href="http://osdoc.cogsci.nl/usage/variables-and-conditional-statements/#usingconditionalifstatements">http://osdoc.cogsci.nl/usage/variables-and-conditional-statements/#usingconditionalifstatements</a></li>
</ul>
<h2 id="loop-items">Loop items</h2>
<p>A <code>loop</code> item calls another item (the ‘item to run’) multiple times, while varying your independent variables. <code>loop</code>s are the main way to define independent variables, and to divide your experiment into trials and blocks.</p>
<h3 id="the-loop-table">The <code>loop</code> table</h3>
<p>In the <code>loop</code> table you can specify variables, which are displayed as columns. The rows in the table correspond to cycles. A cycle corresponds to a ‘level’ or one unique combination of independent variables. You can specify the number of cycles by entering a number in the <em>cycles</em> input field. The <em>repeat</em> option corresponds to the number of times that all cycles should be executed. You can set this to a non-integer value. For example, by setting repeat to 0.5, half of all cycles will be executed.</p>
<p>The <em>order</em> option indicates whether the cycles should be executed sequentially or in random order. Randomization is complete, in the sense that the complete list of [number of cycles] x [repeat] trials is randomized.</p>
<p>If you check <em>Show advanced options</em>, you see three more options:</p>
<ul>
<li><em>Break if</em> is a conditional statement that allows you to specify a stop criterion. For example, if you enter <code>[correct] = 1</code>, the <code>loop</code> will be aborted when the participants provides a correct response.</li>
<li><em>At loop start, skip the first [X] cycle(s)</em> allows you to specify how many cycles should be skipped. For example, if you set this value to ‘2’, the <code>loop</code> will skip the first two cycles and start at cycle 3. This options is only available when <em>order</em> is set to ‘sequential’.</li>
<li>If you check <em>Run skipped cycles at end of loop (offset mode)</em>, the cycles that are skipped initially, as specified above, are still executed at the end of the <code>loop</code>.</li>
</ul>
<h3 id="using-python-functions">Using Python functions</h3>
<p>Most of the time you will enter static values into the <code>loop</code> table. For example, you may have a variable called <code>cue</code>, which is either ‘right’ or ‘left’. However, you can also use functions instead of static values. This is indicated by prepending an ‘=’ character. For example, to draw a random number between 0 and 100, you can enter the following into a cell in the loop table:</p>
<pre><code>=randint(0,100)</code></pre>
<p>More generally,you can enter any valid Python statement after the ‘=’ sign. An overview of of useful functions can be found in the Python documentation:</p>
<ul>
<li>Random functions: <a href="http://docs.python.org/library/random.html">http://docs.python.org/library/random.html</a></li>
<li>Mathematical: <a href="http://docs.python.org/library/math.html">http://docs.python.org/library/math.html</a></li>
</ul>
<h3 id="convenient-ways-of-creating-a-large-loop-table">Convenient ways of creating a large loop table</h3>
<p>If you have multiple variables, each with multiple levels, it is a daunting task to create the entire <code>loop</code> table manually. In this case you may want to use the variable wizard, which can be started by clicking on the <em>Variable wizard</em> button at the top right of the table. In the variable wizard you can specify your variables and the levels of your variables to quickly create a full-factorial design. You can also prepare your <code>loop</code> variables in your favorite spreadsheet (e.g., OpenOffice Calc or Microsoft Excel) and paste them into the <code>loop</code> table.</p>
<p>Fore more information, see:</p>
<ul>
<li><a href="http://osdoc.cogsci.nl/usage/variables-and-conditional-statements/#definingvariables">http://osdoc.cogsci.nl/usage/variables-and-conditional-statements/#definingvariables</a></li>
</ul>
<h2 id="sketchpad-items">Sketchpad items</h2>
<p>Many experiments consist of stimulus displays based on which a participant makes a response. For example, you may present strings of text, geometric shapes, or bitmap images. This is where the <code>sketchpad</code> comes in. The <code>sketchpad</code> provides simple built-in drawing tools that allow you to very easily draw stimulus displays.</p>
<h3 id="duration">Duration</h3>
<p>The <em>Duration</em> entry can be set to any positive numeric value which reflects the duration of the sketchpad in ms. If you want no duration, for example because the next item is a <code>keyboard_response</code>, you can enter ‘0’. You can also enter ‘keypress’ or ‘mouseclick’ to show a <code>sketchpad</code> until a key is pressed or a mouse button is clicked, respectively.</p>
<p>Note that your experiment will pause for the duration for the duration of a <code>sketchpad</code> item, and will not automagically start collecting responses. Therefore, if you want to collect the responses to a <code>sketchpad</code>, you generally set its <em>Duration</em> to 0 ms, and have it followed by a <code>keyboard_response</code> item. This principle is demonstrated in the online <a href="http://osdoc.cogsci.nl/tutorials/">tutorials</a>.</p>
<h3 id="show-if-statements">Show-if statements</h3>
<p>You can use the Show-if field in the <code>sketchpad</code> to specify conditions under which elements should be shown. For example, if you want to have the direction of an arrow depend on the variable <code>cue</code>, you could draw two arrows and use <code>[cue] = left</code> and <code>[cue] = right</code> show-if statements to determine which arrow should be shown on a given trial.</p>
<p>For more information, see:</p>
<ul>
<li><a href="http://osdoc.cogsci.nl/usage/variables-and-conditional-statements/#usingconditionalifstatements">http://osdoc.cogsci.nl/usage/variables-and-conditional-statements/#usingconditionalifstatements</a></li>
</ul>
<h3 id="sketchpads-are-prepared-in-advance-feedback-items-are-not"><code>Sketchpad</code>s are prepared in advance, <code>feedback</code> items are not</h3>
<p>For performance considerations, a <code>sketchpad</code> is prepared before the execution of the <code>sequence</code> that it is part of. Therefore, its contents cannot depend on what happens during the <code>sequence</code> (after the <code>sketchpad</code> has already been prepared). This is not the case for <code>feedback</code> items, which are prepared at runtime and can therefore be used to provide immediate feedback to participants.</p>
<h2 id="feedback-items">Feedback items</h2>
<p><code>feedback</code> items can be used to inform participants of their performance. <code>feedback</code> items are very similar to <code>sketchpad</code> items, but differ in the moment at which they are prepared. <code>feedback</code> items are not prepared in advance, which means that they can contain up-to-date information about response times, etc. On the other, this also means that they may introduce a small delay in your experiment, which is why you should not use them for the presentation of time-critical displays.</p>
<p>One way to give feedback would be to add something the following lines of text to your <code>feedback</code> item:</p>
<pre><code>Your average response time was [avg_rt] ms
Your accuracy was [acc] %</code></pre>
<p>For more information, see:</p>
<ul>
<li><a href="http://osdoc.cogsci.nl/usage/feedback/">http://osdoc.cogsci.nl/usage/feedback/</a></li>
</ul>
<h2 id="sampler-items">Sampler items</h2>
<p><code>Sampler</code> items allow you to play sound files. Only files in <code>.wav or</code> <code>.ogg</code> format can be used. If you need to convert sound files, for example from <code>.mp3</code> format, you can use <a href="http://audacity.sourceforge.net/">Audacity</a>, an excellent open-source sound editor.</p>
<p>You can specify a number of options:</p>
<ul>
<li><em>Volume</em> between 0 and 100%</li>
<li><em>Pan</em> turns the right (negative values) or left (positive values) channel down. Setting pan to -20 or 20 completely mutes the right or left channel, respectively.</li>
<li><em>Pitch</em> indicates the speed at which the sample is played. Values higher than 100% indicate a speed-up, values lower than 100% indicate a slowing down.</li>
<li><em>Stop after</em> indicates how long the sample should be played. For example, a value of 100ms means that the sample will be stopped after 100ms, regardless of how long the sample is. A value of 0ms means playing the full sample.</li>
<li><em>Fade in</em> indicates the fade in time for the sample.</li>
<li><em>Duration</em> indicates the duration of the sampler item, before the next item is presented. This doesn’t need to match the length of the sample. For example, the duration of the sampler may be set to 0ms, to advance directly to the next item (e.g., a sketchpad), while the sample continues playing. In addition to a numeric value, you can set duration to ‘keypress’, to wait for a keyboard press, ‘mouseclick’, to wait for a mouse click, or ‘sound’, to wait until the sampler has finished playing.</li>
</ul>
<h2 id="sampling-rate">Sampling rate</h2>
<p>Sound files are always played back at the sampling rate that is used by the OpenSesame sampler back-end. If your sample appears to be sped up or slowed down, you can adjust the sampling rate of your sound file in a sound editor or change the sampling rate used by the OpenSesame sampler back-end (under ‘Show back-end settings and info’ in the General tab).</p>
<h2 id="synth-items">Synth items</h2>
<p><code>synth</code> items provide basic sound synthesis capabilities. You can specify a number of options:</p>
<ul>
<li><em>Waveform</em> can be set to sine, sawtooth, square or white noise</li>
<li><em>Attack</em> is the time it takes for the sound the reach maximum value, effectively a fade in.</li>
<li><em>Decay</em> is the time it takes for the sound to die out, effectively a fade out. Note that the decay occurs within the length of the sound.</li>
<li><em>Volume</em> between 0 and 100%</li>
<li><em>Pan</em> turns the right (negative values) or left (positive values) channel down. Setting pan to -20 or 20 completely mutes the right or left channel, respectively.</li>
<li><em>Length</em> indicates the length of the sound (in milliseconds).</li>
<li><em>Duration</em> indicates the duration of the synth item, before the next item is presented. This doesn’t need to match the length of the sound. For example, the duration of the synth may be set to 0ms, to advance directly to the next item (e.g., a sketchpad), while the sound continues playing. In addition to a numeric value, you can set duration to ‘keypress’, to wait for a keyboard press, ‘mouseclick’, to wait for a mouse click, or ‘sound’, to wait until the synth has finished playing.</li>
</ul>
<h2 id="keyboard_response-items">Keyboard_response items</h2>
<p>The <code>keyboard_response</code> item is the primary way to collect keypress responses.</p>
<h3 id="options">Options</h3>
<ul>
<li><em>Correct response</em> is the name of the expected response. Usually you will set the <code>correct_response</code> variable elsewhere (e.g., in a loop item) and you can leave this field empty.</li>
<li><em>Allowed responses</em> is a semicolon-separated list of keys that are accepted, e.g., ‘a;b;/’.</li>
<li><em>Timeout</em> contains a maximum response time in milliseconds or ‘infinite’ for no timeout.</li>
<li><em>Flush pending keypresses</em> indicates that old, pending responses should be discarded.</li>
</ul>
<h3 id="variables-set-by-keyboard_response">Variables set by <code>keyboard_response</code></h3>
<ul>
<li><code>response</code> is the name of the response key or ‘None’ if a timeout occurs.</li>
<li><code>response_time</code> is the time between the start of the response interval and the response.</li>
<li><code>correct</code> is 1 if <code>response</code> matches <code>correct_response</code> and 0 otherwise.</li>
<li><code>avg_rt</code> or <code>average_response_time</code> is the average response time since the last feedback item.</li>
<li><code>acc</code> or <code>accuracy</code> is the average percentage of correct responses since the last feedback item.</li>
</ul>
<p>For more information about response variables, see:</p>
<ul>
<li><a href="http://osdoc.cogsci.nl/usage/variables-and-conditional-statements/#responsevariables">http://osdoc.cogsci.nl/usage/variables-and-conditional-statements/#responsevariables</a></li>
</ul>
<h3 id="names-of-keys">Names of keys</h3>
<p>Keys are generally identified by their character and/ or their description (depending on which is applicable). For example, the <code>/</code> key is identified as ‘slash’ and ‘/’. The <code>a</code> is just identified as ‘a’. The left arrow is just identified as ‘left’. For a full list of available key names, click on the ‘List available keys’ button.</p>
<p>For more information, see:</p>
<ul>
<li><a href="http://osdoc.cogsci.nl/usage/collecting-responses/">http://osdoc.cogsci.nl/usage/collecting-responses/</a></li>
</ul>
<h2 id="mouse_response-items">Mouse_response items</h2>
<p><code>Mouse_response</code> items work analogously to the <code>keyboard_response</code> items, with the difference that mouse clicks are recorded instead of key presses.</p>
<h3 id="names-of-mouse-buttons">Names of mouse buttons</h3>
<p>Mouse buttons have a number (<code>1</code>, etc.) as well as a name (<code>left_button</code>, etc.). Both can be used to specify correct and allowed responses, but numbers will be used for logging.</p>
<ul>
<li><code>left_button</code> or <code>1</code></li>
<li><code>middle_button</code> or <code>2</code></li>
<li><code>right_button</code> or <code>3</code></li>
<li><code>scroll_up</code> or <code>4</code></li>
<li><code>scroll_down</code> or <code>5</code></li>
</ul>
<p>For more information, see the help page of the <code>keyboard_response</code> and the documentation:</p>
<ul>
<li><a href="http://osdoc.cogsci.nl/usage/collecting-responses/">http://osdoc.cogsci.nl/usage/collecting-responses/</a></li>
</ul>
<h2 id="logger-items">Logger items</h2>
<p><em>Always triple-check whether OpenSesame has logged all relevant variables!</em></p>
<p>The logger item is the primary way to log your data to file.</p>
<h3 id="selecting-variables">Selecting variables</h3>
<p>In the logger item you can indicate which variables you wish to log. By default the logger tries to auto-detect and log all variables. This is a safe bet, but results in large datafiles, with a lot of unnecessary information. If you uncheck the auto-detect option, you can select variables from a list that contains all variables that OpenSesame is aware of. If, for some reason, the variable that you want to log does not appear in the list, you can add it using the ‘Add custom variable’ button. If you are unsure which variables you want to log, you can click on the Smart select button, which will select all variables that are likely to be of interest.</p>
<h3 id="options-1">Options</h3>
<ul>
<li><em>Use ‘NA’ for variables that have not been set</em> indicates that the logger should not throw an exception when a variable has not been set. This can be useful when you want to log a variable that has not been set the first time that the logger item is called.</li>
<li><em>Automatically detect and log all variables</em> indicates that the logger should auto-detect and log all variables.</li>
<li><em>Put quotes around values</em> indicates that fields in the logfile should be put in quotes.</li>
</ul>
<h3 id="format-of-the-logfile">Format of the logfile</h3>
<p>The logfile is in plain-text, comma-separated format. This format can be viewed in most text-editors (although Windows Notepad may not handle the line-endings properly) and spreadsheets.</p>
<p>For more information, see:</p>
<ul>
<li><a href="http://osdoc.cogsci.nl/usage/logging/">http://osdoc.cogsci.nl/usage/logging/</a></li>
</ul>
<h2 id="inline_script-items">Inline_script items</h2>
<p>You can do a lot with the graphical interface of OpenSesame, but for certain complex tasks you will have to use scripting/ programming. This is where the <code>inline_script</code> item comes in. You can use regular <a href="http://www.python.org">Python</a> code in your <code>inline_script</code>. Python is a modern, powerful and high-level programming language. There are numerous libraries available for Python, so there is really no limit to what you can do using <code>inline_script</code> items.</p>
<p>For more information about using Python scripting, see:</p>
<ul>
<li><a href="http://osdoc.cogsci.nl/python/about/">http://osdoc.cogsci.nl/python/about/</a></li>
</ul>
<p>The <code>inline_script</code> item contains two scripts. The <em>Prepare</em> phase script is called first, before the <code>sequence</code> that contains the <code>inline_script</code> is executed. This allows you to do perform some time-consuming tasks in advance, so that the <em>Run</em> phase goes smoothly. The <em>Run</em> phase script is called during the actual running of the sequence that the <code>inline_script</code> is part of. So if you want to present a stimulus display in your <code>inline_script</code>, it is good practice to construct the display in the <em>Prepare</em> phase and show it in the <em>Run</em> phase. Note that this is purely a convention, from which you can deviate as circumstances dictate.</p>
<p>For more information about the prepare-run strategy, see:</p>
<ul>
<li><a href="http://osdoc.cogsci.nl/usage/prepare-run/">http://osdoc.cogsci.nl/usage/prepare-run/</a></li>
</ul>
