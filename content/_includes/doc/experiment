<div class="ClassDoc YAMLDoc" id="experiment" markdown="1">

# class __experiment__

The `experiment` object controls the flow of the experiment. If you are
writing Python inline code, there are a few functions in the experiment
object that may be useful, mostly to `get` and `set` variables, and to
retrieve files from the file pool. The `experiment` object is a property
of the `inline_script` object, so you can access it as `self.experiment`
in an inline_script. For convenience, you can also refer to it simply as
`exp`. For example, the following script retrieves the full path to a
file from the pool, shows it using a canvas, and stores the timestamp of
the display presentation as `canvas_timestamp`, so it can be logged:

__Example:__

{% highlight python %}
from openexp.canvas import canvas
my_canvas = canvas(exp)
my_canvas.image(exp.get_file('my_image.png'))
timestamp = my_canvas.show()
exp.set('canvas_timestamp', timestamp)
{% endhighlight %}

__Function list:__


- [function __experiment\.\_\_init\_\___\(auto\_response=False, fullscreen=False, name=u'experiment', pool\_folder=None, items=None, workspace=None, experiment\_path=None, subject\_nr=0, logfile=u'defaultlog\.csv', resources=\{\}, string=None\)](#function-__experiment__init____auto_responsefalse-fullscreenfalse-nameuexperiment-pool_foldernone-itemsnone-workspacenone-experiment_pathnone-subject_nr0-logfileudefaultlogcsv-resources-stringnone)
- [function __experiment\.auto\_type__\(val\)](#function-__experimentauto_type__val)
- [function __experiment\.color\_check__\(col\)](#function-__experimentcolor_check__col)
- [function __experiment\.eval\_text__\(text, soft\_ignore=False, round\_float=False, quote\_str=False\)](#function-__experimenteval_text__text-soft_ignorefalse-round_floatfalse-quote_strfalse)
- [function __experiment\.file\_in\_pool__\(path\)](#function-__experimentfile_in_pool__path)
- [function __experiment\.flush\_log__\(\)](#function-__experimentflush_log__)
- [function __experiment\.get__\(var, \_eval=True\)](#function-__experimentget__var-_evaltrue)
- [function __experiment\.get\_check__\(var, default=None, \_eval=True, valid=None\)](#function-__experimentget_check__var-defaultnone-_evaltrue-validnone)
- [function __experiment\.get\_file__\(path\)](#function-__experimentget_file__path)
- [function __experiment\.get\_refs__\(text\)](#function-__experimentget_refs__text)
- [function __experiment\.has__\(var\)](#function-__experimenthas__var)
- [function __experiment\.log__\(msg\)](#function-__experimentlog__msg)
- [function __experiment\.reset__\(\)](#function-__experimentreset__)
- [function __experiment\.resolution__\(\)](#function-__experimentresolution__)
- [function __experiment\.sanitize__\(s, strict=False, allow\_vars=True\)](#function-__experimentsanitize__s-strictfalse-allow_varstrue)
- [function __experiment\.save__\(path, update\_path=True, overwrite=False\)](#function-__experimentsave__path-update_pathtrue-overwritefalse)
- [function __experiment\.set__\(var, val\)](#function-__experimentset__var-val)
- [function __experiment\.set\_response__\(response=None, response\_time=None, correct=None\)](#function-__experimentset_response__responsenone-response_timenone-correctnone)
- [function __experiment\.set\_subject__\(nr\)](#function-__experimentset_subject__nr)
- [function __experiment\.sleep__\(ms\)](#function-__experimentsleep__ms)
- [function __experiment\.time__\(\)](#function-__experimenttime__)
- [function __experiment\.unistr__\(val\)](#function-__experimentunistr__val)
- [function __experiment\.unset__\(var\)](#function-__experimentunset__var)
- [function __experiment\.usanitize__\(s, strict=False\)](#function-__experimentusanitize__s-strictfalse)



<div class="FunctionDoc YAMLDoc" id="experiment-__init__" markdown="1">

## [function __experiment\.\_\_init\_\___\(auto\_response=False, fullscreen=False, name=u'experiment', pool\_folder=None, items=None, workspace=None, experiment\_path=None, subject\_nr=0, logfile=u'defaultlog\.csv', resources=\{\}, string=None\)](#function-__experiment__init____auto_responsefalse-fullscreenfalse-nameuexperiment-pool_foldernone-itemsnone-workspacenone-experiment_pathnone-subject_nr0-logfileudefaultlogcsv-resources-stringnone) {#function-__experiment__init____auto_responsefalse-fullscreenfalse-nameuexperiment-pool_foldernone-itemsnone-workspacenone-experiment_pathnone-subject_nr0-logfileudefaultlogcsv-resources-stringnone}

Constructor. The experiment is created automatically be OpenSesame and you will generally not need to create it yourself.

__Keywords:__

- `auto_response` -- Indicates whether auto-response mode should be enabled.
	- Default: False
	- Type: bool
- `fullscreen` -- Indicates whether the experiment should be executed in fullscreen.
	- Default: False
	- Type: bool
- `name` -- The name of the experiment.
	- Default: u'experiment'
	- Type: str, unicode
- `pool_folder` -- A specific folder to be used for the file pool, or `None` to use a new temporary folder.
	- Default: None
	- Type: str, unicode, NoneType
- `items` -- An `item_store` object to be used for storing items internally, or `None` to create a new item store.
	- Default: None
	- Type: item_store, NoneType
- `experiment_path` -- The path of the experiment file. This will need to be specified even if a filename was passed using the `string` keyword.
	- Default: None
	- Type: str, unicode, NoneType
- `workspace` -- A `python_workspace` object to be used for executing custom Python code, or `None` to create a new workspace.
	- Default: None
	- Type: python_workspace, NoneType
- `subject_nr` -- The subject number.
	- Default: 0
	- Type: int
- `logfile` -- The logfile path.
	- Default: u'defaultlog.csv'
	- Type: unicode, str
- `resources` -- A dictionary with names as keys and paths as values. This serves as a look-up table for resources.
	- Default: {}
	- Type: dict
- `string` -- A string containing the experiment definition, the name of an OpenSesame experiment file, or `None` to create a blank experiment.
	- Default: None
	- Type: str, unicode, NoneType

</div>

[experiment.__init__]: #experiment-__init__
[__init__]: #experiment-__init__

<div class="FunctionDoc YAMLDoc" id="experiment-auto_type" markdown="1">

## [function __experiment\.auto\_type__\(val\)](#function-__experimentauto_type__val) {#function-__experimentauto_type__val}

Converts a value into the 'best fitting' or 'simplest' type that is compatible with the value.

__Arguments:__

- `val` -- A value. This can be any type.

__Returns:__

The same value converted to the 'best fitting' type.

- Type: unicode, int, float

</div>

[experiment.auto_type]: #experiment-auto_type
[auto_type]: #experiment-auto_type

<div class="FunctionDoc YAMLDoc" id="experiment-color_check" markdown="1">

## [function __experiment\.color\_check__\(col\)](#function-__experimentcolor_check__col) {#function-__experimentcolor_check__col}

Checks whether a string is a valid color name. Raises an exception if `col` is not a valid color.

__Example:__

{% highlight python %}
# Ok
print(self.color_check('red'))
# Ok
print(self.color_check('#FFFFFF'))
# Raises osexception
print(self.color_check('this is not a color'))
{% endhighlight %}

__Arguments:__

- `col` -- The color to check.

</div>

[experiment.color_check]: #experiment-color_check
[color_check]: #experiment-color_check

<div class="FunctionDoc YAMLDoc" id="experiment-eval_text" markdown="1">

## [function __experiment\.eval\_text__\(text, soft\_ignore=False, round\_float=False, quote\_str=False\)](#function-__experimenteval_text__text-soft_ignorefalse-round_floatfalse-quote_strfalse) {#function-__experimenteval_text__text-soft_ignorefalse-round_floatfalse-quote_strfalse}

Evaluates a string of text, so that all variable references (e.g., '[var]') are replaced by values.

__Example:__

{% highlight python %}
exp.set('var', 'evaluated')
print(self.eval_text('This string has been [var]'))
# Prints 'This string has been evaluated
{% endhighlight %}

__Arguments:__

- `text` -- The text to be evaluated. This can be any type, but only str and unicode types will be evaluated.

__Keywords:__

- `soft_ignore` -- A Boolean indicating whether missing variables should be ignored, rather than cause an exception.
	- Default: False
	- Type: bool
- `round_float` -- A Boolean indicating whether float values should be rounded to a precision of [round_decimals]. round_decimals is an OpenSesame variable that has a default value of 2.
	- Default: False
	- Type: bool
- `quote_str` -- A Boolean indicating whether string variables should be surrounded by single quotes (default=False).
	- Default: False
	- Type: bool

__Returns:__

The evaluated text.

- Type: unicode, int, float

</div>

[experiment.eval_text]: #experiment-eval_text
[eval_text]: #experiment-eval_text

<div class="FunctionDoc YAMLDoc" id="experiment-file_in_pool" markdown="1">

## [function __experiment\.file\_in\_pool__\(path\)](#function-__experimentfile_in_pool__path) {#function-__experimentfile_in_pool__path}

Checks if a file is in the file pool.

__Example:__

{% highlight python %}
if not exp.file_in_pool('my_image.png'):
        print('my_image.png could not be found!')
else:
        image_path = exp.get_file('my_image.png')
        my_canvas = exp.offline_canvas()
        my_canvas.image(image_path)
{% endhighlight %}

__Arguments:__

- `path` -- No description

__Returns:__

A bool indicating if the file is in the pool.

- Type: bool

</div>

[experiment.file_in_pool]: #experiment-file_in_pool
[file_in_pool]: #experiment-file_in_pool

<div class="FunctionDoc YAMLDoc" id="experiment-flush_log" markdown="1">

## [function __experiment\.flush\_log__\(\)](#function-__experimentflush_log__) {#function-__experimentflush_log__}

Forces any pending write operations to the log file to be written to disk.

__Example:__

{% highlight python %}
self.log('TRIAL FINISHED')
self.flush_log()
{% endhighlight %}

</div>

[experiment.flush_log]: #experiment-flush_log
[flush_log]: #experiment-flush_log

<div class="FunctionDoc YAMLDoc" id="experiment-get" markdown="1">

## [function __experiment\.get__\(var, \_eval=True\)](#function-__experimentget__var-_evaltrue) {#function-__experimentget__var-_evaltrue}

Returns the value of an OpenSesame variable. Checks first if the
variable exists 'locally' in the item and, if not, checks if the
variable exists 'globally' in the experiment.

The type of the returned value can be int, float, or unicode
(string). The appropriate type is automatically selected, e.g. '10'
is returned as int, '10.1' as float, and 'some text' as unicode.

The _eval parameter is used to specify whether the value of the
variable should be evaluated, in case it contains references to
other variables. This is best illustrated by example 2 below.

__Example:__

{% highlight python %}
# Example 1
if self.get('cue') == 'valid':
        print('This is a validly cued trial')

# Example 2
exp.set('var1', 'I like [var2]')
exp.set('var2', 'OpenSesame')
print(self.get('var1')) # prints 'I like OpenSesame'
print(self.get('var1', _eval=False)) # prints 'I like [var2]'
{% endhighlight %}

__Arguments:__

- `var` -- The name of an OpenSesame variable.
	- Type: str, unicode

__Keywords:__

- `_eval` -- Indicates whether the variable should be evaluated, i.e. whether containing variables should be processed.
	- Default: True
	- Type: bool

__Returns:__

The value.

- Type: unicode, int, float

</div>

[experiment.get]: #experiment-get
[get]: #experiment-get

<div class="FunctionDoc YAMLDoc" id="experiment-get_check" markdown="1">

## [function __experiment\.get\_check__\(var, default=None, \_eval=True, valid=None\)](#function-__experimentget_check__var-defaultnone-_evaltrue-validnone) {#function-__experimentget_check__var-defaultnone-_evaltrue-validnone}

Similar to get(), but falls back to a default if the variable has not been set. It also raises an error if the value is not part of the valid list.

__Example:__

{% highlight python %}
if self.get_check('cue', default='invalid') == 'valid':
        print('This is a validly-cued trial')
{% endhighlight %}

__Arguments:__

- `var` -- The name of an OpenSesame variable
	- Type: unicode, str

__Keywords:__

- `default` -- A default 'fallback' value or None for no fallback, in which case an exception is rased if the variable does not exist.
	- Default: None
	- Type: unicode, float, int
- `_eval` -- Indicates whether the variable should be evaluated, i.e. whether containing variables should be processed.
	- Default: True
	- Type: bool
- `valid` -- A list of allowed values (or None for no restrictions). An exception is raised if the value is not an allowed value.
	- Default: None
	- Type: list, NoneType

__Returns:__

The value

- Type: unicode, float, int

</div>

[experiment.get_check]: #experiment-get_check
[get_check]: #experiment-get_check

<div class="FunctionDoc YAMLDoc" id="experiment-get_file" markdown="1">

## [function __experiment\.get\_file__\(path\)](#function-__experimentget_file__path) {#function-__experimentget_file__path}

Returns the full path to a file. The logic is as follows:

1. First checks if `path` is a file in the file pool.
2. If not, check if `path` is a file in the folder of the current
   experiment (if any).
3. If not, check if `path` is a file in the `__pool__` subfolder of
   the current experiment.
4. If not, simply return `path`.

__Example:__

{% highlight python %}
image_path = exp.get_file('my_image.png')
my_canvas = exp.offline_canvas()
my_canvas.image(image_path)
{% endhighlight %}

__Arguments:__

- `path` -- A filename. This can be any type, but will be coerced to `unicode` if it is not `unicode`.

__Returns:__

The full path to the file.

- Type: unicode

</div>

[experiment.get_file]: #experiment-get_file
[get_file]: #experiment-get_file

<div class="FunctionDoc YAMLDoc" id="experiment-get_refs" markdown="1">

## [function __experiment\.get\_refs__\(text\)](#function-__experimentget_refs__text) {#function-__experimentget_refs__text}

Returns a list of variables that are referred to by a string of text.

__Arguments:__

- `text` -- A string of text. This can be any type, but will coerced to unicode if it is not unicode.

__Returns:__

A list of variable names or an empty list if the string contains no references.

- Type: list

</div>

[experiment.get_refs]: #experiment-get_refs
[get_refs]: #experiment-get_refs

<div class="FunctionDoc YAMLDoc" id="experiment-has" markdown="1">

## [function __experiment\.has__\(var\)](#function-__experimenthas__var) {#function-__experimenthas__var}

Checks if an OpenSesame variable exists, either in the item or in the experiment.

__Example:__

{% highlight python %}
if not self.has('response'):
        print('No response has been collected yet')
{% endhighlight %}

__Arguments:__

- `var` -- The name of an OpenSesame variable.
	- Type: str, unicode

__Returns:__

True if the variable exists, False if not.

- Type: bool

</div>

[experiment.has]: #experiment-has
[has]: #experiment-has

<div class="FunctionDoc YAMLDoc" id="experiment-log" markdown="1">

## [function __experiment\.log__\(msg\)](#function-__experimentlog__msg) {#function-__experimentlog__msg}

Writes a message to the log file. Note that using the `log()` function in combination with a logger item may result in messy log files.

__Example:__

{% highlight python %}
self.log('TIMESTAMP = %s' % self.time())
{% endhighlight %}

__Arguments:__

- `msg` -- A message. This can be any type and will we be converted to a unicode string using the logic described in [unistr].

</div>

[experiment.log]: #experiment-log
[log]: #experiment-log

<div class="FunctionDoc YAMLDoc" id="experiment-reset" markdown="1">

## [function __experiment\.reset__\(\)](#function-__experimentreset__) {#function-__experimentreset__}

Resets all item variables to their default value.

</div>

[experiment.reset]: #experiment-reset
[reset]: #experiment-reset

<div class="FunctionDoc YAMLDoc" id="experiment-resolution" markdown="1">

## [function __experiment\.resolution__\(\)](#function-__experimentresolution__) {#function-__experimentresolution__}

Returns the display resolution and checks whether the resolution is
valid.

__Important note:__

The meaning of 'resolution' depends on the back-end. For example,
the legacy back-end changes the actual resolution of the display,
whereas the other back-ends do not alter the actual display
resolution, but create a 'virtual display' with the requested
resolution that is presented in the center of the display.

__Returns:__

A (width, height) tuple

- Type: tuple

</div>

[experiment.resolution]: #experiment-resolution
[resolution]: #experiment-resolution

<div class="FunctionDoc YAMLDoc" id="experiment-sanitize" markdown="1">

## [function __experiment\.sanitize__\(s, strict=False, allow\_vars=True\)](#function-__experimentsanitize__s-strictfalse-allow_varstrue) {#function-__experimentsanitize__s-strictfalse-allow_varstrue}

Removes invalid characters (notably quotes) from the string.

__Example:__

{% highlight python %}
# Prints 'Universit Aix-Marseille'
print(self.sanitize('"Université Aix-Marseille"'))
# Prints 'UniversitAixMarseille'
print(self.sanitize('"Université Aix-Marseille""', strict=True))
{% endhighlight %}

__Arguments:__

- `s` -- The string to be sanitized. This can be any type, but if it is not unicode, it will be coerced to unicode.

__Keywords:__

- `strict` -- If True, all except underscores and alphanumeric characters are stripped.
	- Default: False
	- Type: bool
- `allow_vars` -- If True, square brackets are not sanitized, so you can use variables.
	- Default: True
	- Type: bool

__Returns:__

A sanitized string.

- Type: unicode

</div>

[experiment.sanitize]: #experiment-sanitize
[sanitize]: #experiment-sanitize

<div class="FunctionDoc YAMLDoc" id="experiment-save" markdown="1">

## [function __experiment\.save__\(path, update\_path=True, overwrite=False\)](#function-__experimentsave__path-update_pathtrue-overwritefalse) {#function-__experimentsave__path-update_pathtrue-overwritefalse}

Saves the experiment to file. If no extension is provided, .opensesame.tar.gz is chosen by default.

__Arguments:__

- `path` -- The target file to save to.
	- Type: str, unicode

__Keywords:__

- `update_path` -- Indicates if the experiment_path attribute should be updated.
	- Default: True
	- Type: bool
- `overwrite` -- Indicates if existing files should be overwritten.
	- Default: False
	- Type: bool

__Returns:__

The path on successful saving or False otherwise.

- Type: unicode, bool

</div>

[experiment.save]: #experiment-save
[save]: #experiment-save

<div class="FunctionDoc YAMLDoc" id="experiment-set" markdown="1">

## [function __experiment\.set__\(var, val\)](#function-__experimentset__var-val) {#function-__experimentset__var-val}

Sets an OpenSesame variable.

If you want to set a variable so that it is available in other items
as well (such as the logger item, so you can log the variable), you
need to use the set() function from the experiment. So, in an
inline_script item you would generally set a variable with
exp.set(), rather than self.set().

__Important note:__

You can only set simple variable types (unicode, float, and int).
If you use the set function to save another type of variable, it
will be converted to a unicode representation.

__Example:__

{% highlight python %}
exp.set('my_timestamp', self.time())
{% endhighlight %}

__Arguments:__

- `var` -- The name of an experimental variable.
	- Type: str, unicode
- `val` -- A value.

</div>

[experiment.set]: #experiment-set
[set]: #experiment-set

<div class="FunctionDoc YAMLDoc" id="experiment-set_response" markdown="1">

## [function __experiment\.set\_response__\(response=None, response\_time=None, correct=None\)](#function-__experimentset_response__responsenone-response_timenone-correctnone) {#function-__experimentset_response__responsenone-response_timenone-correctnone}

Processes a response in such a way that feedback variables are updated as well.

__Example:__

{% highlight python %}
from openexp.keyboard import keyboard
my_keyboard = keyboard(exp)
t1 = self.time()
button, timestamp = my_keyboard.get_key()
if button == 'left':
        correct = 1
else:
        correct = 0
rt = timestamp - t1
self.set_response(response=button, response_time=rt,
        correct=correct)
{% endhighlight %}

__Keywords:__

- `response` -- The response value.
	- Default: None
- `response_time` -- The response time, or None.
	- Default: None
	- Type: int, float, NoneType
- `correct` -- The correctness value, which should be 0, 1, True, False, or None.
	- Default: None
	- Type: int, bool, NoneType

</div>

[experiment.set_response]: #experiment-set_response
[set_response]: #experiment-set_response

<div class="FunctionDoc YAMLDoc" id="experiment-set_subject" markdown="1">

## [function __experiment\.set\_subject__\(nr\)](#function-__experimentset_subject__nr) {#function-__experimentset_subject__nr}

Sets the subject number and parity (even/ odd). This function is called automatically when an experiment is started, so you do not generally need to call it yourself.

__Example:__

{% highlight python %}
exp.set_subject(1)
print('Subject nr = %d' % exp.get('subject_nr'))
print('Subject parity = %s' % exp.get('subject_parity'))
{% endhighlight %}

__Arguments:__

- `nr` -- The subject nr.
	- Type: int

</div>

[experiment.set_subject]: #experiment-set_subject
[set_subject]: #experiment-set_subject

<div class="FunctionDoc YAMLDoc" id="experiment-sleep" markdown="1">

## [function __experiment\.sleep__\(ms\)](#function-__experimentsleep__ms) {#function-__experimentsleep__ms}

Sleeps for a specified duration.

__Example:__

{% highlight python %}
self.sleep(1000) # Sleeps one second
{% endhighlight %}

__Arguments:__

- `ms` -- An value specifying the duration in milliseconds.
	- Type: int, float

</div>

[experiment.sleep]: #experiment-sleep
[sleep]: #experiment-sleep

<div class="FunctionDoc YAMLDoc" id="experiment-time" markdown="1">

## [function __experiment\.time__\(\)](#function-__experimenttime__) {#function-__experimenttime__}

Returns a timestamp for the current time. This timestamp only has a relative meaning, i.e. you can use it to determine the interval between two moments, but not the actual time. Whether the timestamp is a `float` or `int` depends on the back-end.

__Example:__

{% highlight python %}
print('The time is %s' % self.time())
{% endhighlight %}

__Returns:__

A timestamp of the current time.

- Type: int, float

</div>

[experiment.time]: #experiment-time
[time]: #experiment-time

<div class="FunctionDoc YAMLDoc" id="experiment-unistr" markdown="1">

## [function __experiment\.unistr__\(val\)](#function-__experimentunistr__val) {#function-__experimentunistr__val}

Converts a value to a unicode string. This function is mostly
necessary to make sure that normal strings with special characters
are correctly encoded into unicode, and don't result in TypeErrors.

The conversion logic is as follows:

- unicode values are returned unchanged.
- str values are decoded using utf-8.
- all other types are typecast to unicode, assuming utf-8 encoding
  where applicable.

__Arguments:__

- `val` -- A value of any type.

__Returns:__

A unicode string.

- Type: unicode

</div>

[experiment.unistr]: #experiment-unistr
[unistr]: #experiment-unistr

<div class="FunctionDoc YAMLDoc" id="experiment-unset" markdown="1">

## [function __experiment\.unset__\(var\)](#function-__experimentunset__var) {#function-__experimentunset__var}

Unsets (forgets) an OpenSesame variable.

__Example:__

{% highlight python %}
self.set('var', 'Hello world!')
print(self.get('var')) # Prints 'Hello world!'
self.unset('variable_to_forget')
print(self.get('var')) # Gives error!
{% endhighlight %}

__Arguments:__

- `var` -- The name of an OpenSesame variable.
	- Type: str, unicode

</div>

[experiment.unset]: #experiment-unset
[unset]: #experiment-unset

<div class="FunctionDoc YAMLDoc" id="experiment-usanitize" markdown="1">

## [function __experiment\.usanitize__\(s, strict=False\)](#function-__experimentusanitize__s-strictfalse) {#function-__experimentusanitize__s-strictfalse}

Converts all non-ASCII characters to U+XXXX notation, so that the resulting string can be treated as plain ASCII text.

__Arguments:__

- `s` -- A unicode string to be santized
	- Type: unicode

__Keywords:__

- `strict` -- If True, special characters are ignored rather than recoded.
	- Default: False
	- Type: bool

__Returns:__

A regular Python string with all special characters replaced by U+XXXX notation or ignored (if strict).

- Type: str

</div>

[experiment.usanitize]: #experiment-usanitize
[usanitize]: #experiment-usanitize

</div>

[experiment]: #experiment


[function __experiment\.\_\_init\_\___\(auto\_response=False, fullscreen=False, name=u'experiment', pool\_folder=None, items=None, workspace=None, experiment\_path=None, subject\_nr=0, logfile=u'defaultlog\.csv', resources=\{\}, string=None\)]: #function-__experiment__init____auto_responsefalse-fullscreenfalse-nameuexperiment-pool_foldernone-itemsnone-workspacenone-experiment_pathnone-subject_nr0-logfileudefaultlogcsv-resources-stringnone
[function __experiment\.auto\_type__\(val\)]: #function-__experimentauto_type__val
[function __experiment\.color\_check__\(col\)]: #function-__experimentcolor_check__col
[function __experiment\.eval\_text__\(text, soft\_ignore=False, round\_float=False, quote\_str=False\)]: #function-__experimenteval_text__text-soft_ignorefalse-round_floatfalse-quote_strfalse
[function __experiment\.file\_in\_pool__\(path\)]: #function-__experimentfile_in_pool__path
[function __experiment\.flush\_log__\(\)]: #function-__experimentflush_log__
[function __experiment\.get__\(var, \_eval=True\)]: #function-__experimentget__var-_evaltrue
[function __experiment\.get\_check__\(var, default=None, \_eval=True, valid=None\)]: #function-__experimentget_check__var-defaultnone-_evaltrue-validnone
[function __experiment\.get\_file__\(path\)]: #function-__experimentget_file__path
[function __experiment\.get\_refs__\(text\)]: #function-__experimentget_refs__text
[function __experiment\.has__\(var\)]: #function-__experimenthas__var
[function __experiment\.log__\(msg\)]: #function-__experimentlog__msg
[function __experiment\.reset__\(\)]: #function-__experimentreset__
[function __experiment\.resolution__\(\)]: #function-__experimentresolution__
[function __experiment\.sanitize__\(s, strict=False, allow\_vars=True\)]: #function-__experimentsanitize__s-strictfalse-allow_varstrue
[function __experiment\.save__\(path, update\_path=True, overwrite=False\)]: #function-__experimentsave__path-update_pathtrue-overwritefalse
[function __experiment\.set__\(var, val\)]: #function-__experimentset__var-val
[function __experiment\.set\_response__\(response=None, response\_time=None, correct=None\)]: #function-__experimentset_response__responsenone-response_timenone-correctnone
[function __experiment\.set\_subject__\(nr\)]: #function-__experimentset_subject__nr
[function __experiment\.sleep__\(ms\)]: #function-__experimentsleep__ms
[function __experiment\.time__\(\)]: #function-__experimenttime__
[function __experiment\.unistr__\(val\)]: #function-__experimentunistr__val
[function __experiment\.unset__\(var\)]: #function-__experimentunset__var
[function __experiment\.usanitize__\(s, strict=False\)]: #function-__experimentusanitize__s-strictfalse