<div class="ClassDoc YAMLDoc" id="inline_script" markdown="1">

# class __inline_script__

Allows users to use Python code in their experiments.

When you are using the inline_script item, you are essentially writing
the body of two functions (`prepare` and `run`) of an `inline_script`
object. The `inline_script` object has many more functions which you can
use, and these are listed below. To use these functions, you use the
`self.[function_name]` notation.

__Important note:__

All inline_script items share the same workspace. This means that
variables that are created in one inline_script are available in
another inline_script. Similarly, modules that are imported in one
inline_script are available in all other inline_scripts.

__Example:__

{% highlight python %}
subject_nr = self.get("subject_nr")
{% endhighlight %}

__Example:__

{% highlight python %}
self.sleep(1000)
{% endhighlight %}

__Function list:__


- [function __inline\_script\.auto\_type__\(val\)](#function-__inline_scriptauto_type__val)
- [function __inline\_script\.color\_check__\(col\)](#function-__inline_scriptcolor_check__col)
- [function __inline\_script\.copy\_sketchpad__\(sketchpad\_name\)](#function-__inline_scriptcopy_sketchpad__sketchpad_name)
- [function __inline\_script\.eval\_text__\(text, soft\_ignore=False, round\_float=False, quote\_str=False\)](#function-__inline_scripteval_text__text-soft_ignorefalse-round_floatfalse-quote_strfalse)
- [function __inline\_script\.flush\_log__\(\)](#function-__inline_scriptflush_log__)
- [function __inline\_script\.from\_string__\(string\)](#function-__inline_scriptfrom_string__string)
- [function __inline\_script\.get__\(var, \_eval=True\)](#function-__inline_scriptget__var-_evaltrue)
- [function __inline\_script\.get\_check__\(var, default=None, \_eval=True, valid=None\)](#function-__inline_scriptget_check__var-defaultnone-_evaltrue-validnone)
- [function __inline\_script\.get\_refs__\(text\)](#function-__inline_scriptget_refs__text)
- [function __inline\_script\.has__\(var\)](#function-__inline_scripthas__var)
- [function __inline\_script\.log__\(msg\)](#function-__inline_scriptlog__msg)
- [function __inline\_script\.offline\_canvas__\(auto\_prepare=True\)](#function-__inline_scriptoffline_canvas__auto_preparetrue)
- [function __inline\_script\.prepare__\(\)](#function-__inline_scriptprepare__)
- [function __inline\_script\.resolution__\(\)](#function-__inline_scriptresolution__)
- [function __inline\_script\.run__\(\)](#function-__inline_scriptrun__)
- [function __inline\_script\.sanitize__\(s, strict=False, allow\_vars=True\)](#function-__inline_scriptsanitize__s-strictfalse-allow_varstrue)
- [function __inline\_script\.set__\(var, val\)](#function-__inline_scriptset__var-val)
- [function __inline\_script\.set\_response__\(response=None, response\_time=None, correct=None\)](#function-__inline_scriptset_response__responsenone-response_timenone-correctnone)
- [function __inline\_script\.sleep__\(ms\)](#function-__inline_scriptsleep__ms)
- [function __inline\_script\.time__\(\)](#function-__inline_scripttime__)
- [function __inline\_script\.unistr__\(val\)](#function-__inline_scriptunistr__val)
- [function __inline\_script\.unset__\(var\)](#function-__inline_scriptunset__var)
- [function __inline\_script\.usanitize__\(s, strict=False\)](#function-__inline_scriptusanitize__s-strictfalse)



<div class="FunctionDoc YAMLDoc" id="inline_script-auto_type" markdown="1">

## [function __inline\_script\.auto\_type__\(val\)](#function-__inline_scriptauto_type__val) {#function-__inline_scriptauto_type__val}

Converts a value into the 'best fitting' or 'simplest' type that is compatible with the value.

__Arguments:__

- `val` -- A value. This can be any type.

__Returns:__

The same value converted to the 'best fitting' type.

- Type: unicode, int, float

</div>

[inline_script.auto_type]: #inline_script-auto_type
[auto_type]: #inline_script-auto_type

<div class="FunctionDoc YAMLDoc" id="inline_script-color_check" markdown="1">

## [function __inline\_script\.color\_check__\(col\)](#function-__inline_scriptcolor_check__col) {#function-__inline_scriptcolor_check__col}

Checks whether a string is a valid color name. Raises an exception if `col` is not a valid color.

__Example:__

{% highlight python %}
# Ok
print(self.color_check('red'))
# Ok
print(self.color_check('#FFFFFF'))
# Raises osexception
print(self.color_check('this is not a color'))
{% endhighlight %}

__Arguments:__

- `col` -- The color to check.

</div>

[inline_script.color_check]: #inline_script-color_check
[color_check]: #inline_script-color_check

<div class="FunctionDoc YAMLDoc" id="inline_script-copy_sketchpad" markdown="1">

## [function __inline\_script\.copy\_sketchpad__\(sketchpad\_name\)](#function-__inline_scriptcopy_sketchpad__sketchpad_name) {#function-__inline_scriptcopy_sketchpad__sketchpad_name}

Creates a canvas that is a copy from the canvas of a sketchpad item.

__Example:__

{% highlight python %}
my_canvas = self.copy_sketchpad('my_sketchpad')
{% endhighlight %}

__Arguments:__

- `sketchpad_name` -- The name of the sketchpad.
	- Type: str, unicode

__Returns:__

A canvas.

- Type: canvas

</div>

[inline_script.copy_sketchpad]: #inline_script-copy_sketchpad
[copy_sketchpad]: #inline_script-copy_sketchpad

<div class="FunctionDoc YAMLDoc" id="inline_script-eval_text" markdown="1">

## [function __inline\_script\.eval\_text__\(text, soft\_ignore=False, round\_float=False, quote\_str=False\)](#function-__inline_scripteval_text__text-soft_ignorefalse-round_floatfalse-quote_strfalse) {#function-__inline_scripteval_text__text-soft_ignorefalse-round_floatfalse-quote_strfalse}

Evaluates a string of text, so that all variable references (e.g., '[var]') are replaced by values.

__Example:__

{% highlight python %}
exp.set('var', 'evaluated')
print(self.eval_text('This string has been [var]'))
# Prints 'This string has been evaluated
{% endhighlight %}

__Arguments:__

- `text` -- The text to be evaluated. This can be any type, but only str and unicode types will be evaluated.

__Keywords:__

- `round_float` -- A Boolean indicating whether float values should be rounded to a precision of [round_decimals]. round_decimals is an OpenSesame variable that has a default value of 2.
	- Type: bool
	- Default: False
- `soft_ignore` -- A Boolean indicating whether missing variables should be ignored, rather than cause an exception.
	- Type: bool
	- Default: False
- `quote_str` -- A Boolean indicating whether string variables should be surrounded by single quotes (default=False).
	- Type: bool
	- Default: False

__Returns:__

The evaluated text.

- Type: unicode, int, float

</div>

[inline_script.eval_text]: #inline_script-eval_text
[eval_text]: #inline_script-eval_text

<div class="FunctionDoc YAMLDoc" id="inline_script-flush_log" markdown="1">

## [function __inline\_script\.flush\_log__\(\)](#function-__inline_scriptflush_log__) {#function-__inline_scriptflush_log__}

Forces any pending write operations to the log file to be written to disk.

__Example:__

{% highlight python %}
self.log('TRIAL FINISHED')
self.flush_log()
{% endhighlight %}

</div>

[inline_script.flush_log]: #inline_script-flush_log
[flush_log]: #inline_script-flush_log

<div class="FunctionDoc YAMLDoc" id="inline_script-from_string" markdown="1">

## [function __inline\_script\.from\_string__\(string\)](#function-__inline_scriptfrom_string__string) {#function-__inline_scriptfrom_string__string}

Parses the item from a definition string.

__Arguments:__

- `string` -- A definition string, or None to reset the item.
	- Type: str, NoneType

</div>

[inline_script.from_string]: #inline_script-from_string
[from_string]: #inline_script-from_string

<div class="FunctionDoc YAMLDoc" id="inline_script-get" markdown="1">

## [function __inline\_script\.get__\(var, \_eval=True\)](#function-__inline_scriptget__var-_evaltrue) {#function-__inline_scriptget__var-_evaltrue}

Returns the value of an OpenSesame variable. Checks first if the
variable exists 'locally' in the item and, if not, checks if the
variable exists 'globally' in the experiment.

The type of the returned value can be int, float, or unicode
(string). The appropriate type is automatically selected, e.g. '10'
is returned as int, '10.1' as float, and 'some text' as unicode.

The _eval parameter is used to specify whether the value of the
variable should be evaluated, in case it contains references to
other variables. This is best illustrated by example 2 below.

__Example:__

{% highlight python %}
# Example 1
if self.get('cue') == 'valid':
        print('This is a validly cued trial')

# Example 2
exp.set('var1', 'I like [var2]')
exp.set('var2', 'OpenSesame')
print(self.get('var1')) # prints 'I like OpenSesame'
print(self.get('var1', _eval=False)) # prints 'I like [var2]'
{% endhighlight %}

__Arguments:__

- `var` -- The name of an OpenSesame variable.
	- Type: str, unicode

__Keywords:__

- `_eval` -- Indicates whether the variable should be evaluated, i.e. whether containing variables should be processed.
	- Type: bool
	- Default: True

__Returns:__

The value.

- Type: unicode, int, float

</div>

[inline_script.get]: #inline_script-get
[get]: #inline_script-get

<div class="FunctionDoc YAMLDoc" id="inline_script-get_check" markdown="1">

## [function __inline\_script\.get\_check__\(var, default=None, \_eval=True, valid=None\)](#function-__inline_scriptget_check__var-defaultnone-_evaltrue-validnone) {#function-__inline_scriptget_check__var-defaultnone-_evaltrue-validnone}

Similar to get(), but falls back to a default if the variable has not been set. It also raises an error if the value is not part of the valid list.

__Example:__

{% highlight python %}
if self.get_check('cue', default='invalid') == 'valid':
        print('This is a validly-cued trial')
{% endhighlight %}

__Arguments:__

- `var` -- The name of an OpenSesame variable
	- Type: unicode, str

__Keywords:__

- `default` -- A default 'fallback' value or None for no fallback, in which case an exception is rased if the variable does not exist.
	- Type: unicode, float, int
	- Default: None
- `valid` -- A list of allowed values (or None for no restrictions). An exception is raised if the value is not an allowed value.
	- Type: list, NoneType
	- Default: None
- `_eval` -- Indicates whether the variable should be evaluated, i.e. whether containing variables should be processed.
	- Type: bool
	- Default: True

__Returns:__

The value

- Type: unicode, float, int

</div>

[inline_script.get_check]: #inline_script-get_check
[get_check]: #inline_script-get_check

<div class="FunctionDoc YAMLDoc" id="inline_script-get_refs" markdown="1">

## [function __inline\_script\.get\_refs__\(text\)](#function-__inline_scriptget_refs__text) {#function-__inline_scriptget_refs__text}

Returns a list of variables that are referred to by a string of text.

__Arguments:__

- `text` -- A string of text. This can be any type, but will coerced to unicode if it is not unicode.

__Returns:__

A list of variable names or an empty list if the string contains no references.

- Type: list

</div>

[inline_script.get_refs]: #inline_script-get_refs
[get_refs]: #inline_script-get_refs

<div class="FunctionDoc YAMLDoc" id="inline_script-has" markdown="1">

## [function __inline\_script\.has__\(var\)](#function-__inline_scripthas__var) {#function-__inline_scripthas__var}

Checks if an OpenSesame variable exists, either in the item or in the experiment.

__Example:__

{% highlight python %}
if not self.has('response'):
        print('No response has been collected yet')
{% endhighlight %}

__Arguments:__

- `var` -- The name of an OpenSesame variable.
	- Type: str, unicode

__Returns:__

True if the variable exists, False if not.

- Type: bool

</div>

[inline_script.has]: #inline_script-has
[has]: #inline_script-has

<div class="FunctionDoc YAMLDoc" id="inline_script-log" markdown="1">

## [function __inline\_script\.log__\(msg\)](#function-__inline_scriptlog__msg) {#function-__inline_scriptlog__msg}

Writes a message to the log file. Note that using the `log()` function in combination with a logger item may result in messy log files.

__Example:__

{% highlight python %}
self.log('TIMESTAMP = %s' % self.time())
{% endhighlight %}

__Arguments:__

- `msg` -- A message. This can be any type and will we be converted to a unicode string using the logic described in [unistr].

</div>

[inline_script.log]: #inline_script-log
[log]: #inline_script-log

<div class="FunctionDoc YAMLDoc" id="inline_script-offline_canvas" markdown="1">

## [function __inline\_script\.offline\_canvas__\(auto\_prepare=True\)](#function-__inline_scriptoffline_canvas__auto_preparetrue) {#function-__inline_scriptoffline_canvas__auto_preparetrue}

Creates an empty canvas.

__Example:__

{% highlight python %}
my_canvas = self.offline_canvas()
{% endhighlight %}

__Keywords:__

- `auto_prepare` -- See `openexp.canvas.__init__`.
	- Type: bool
	- Default: True

__Returns:__

A canvas.

- Type: canvas

</div>

[inline_script.offline_canvas]: #inline_script-offline_canvas
[offline_canvas]: #inline_script-offline_canvas

<div class="FunctionDoc YAMLDoc" id="inline_script-prepare" markdown="1">

## [function __inline\_script\.prepare__\(\)](#function-__inline_scriptprepare__) {#function-__inline_scriptprepare__}

Executes the prepare script. The code that you enter in the 'prepare' tab of an inline_script item in the GUI is used as a body for this function.

</div>

[inline_script.prepare]: #inline_script-prepare
[prepare]: #inline_script-prepare

<div class="FunctionDoc YAMLDoc" id="inline_script-resolution" markdown="1">

## [function __inline\_script\.resolution__\(\)](#function-__inline_scriptresolution__) {#function-__inline_scriptresolution__}

Returns the display resolution and checks whether the resolution is
valid.

__Important note:__

The meaning of 'resolution' depends on the back-end. For example,
the legacy back-end changes the actual resolution of the display,
whereas the other back-ends do not alter the actual display
resolution, but create a 'virtual display' with the requested
resolution that is presented in the center of the display.

__Returns:__

A (width, height) tuple

- Type: tuple

</div>

[inline_script.resolution]: #inline_script-resolution
[resolution]: #inline_script-resolution

<div class="FunctionDoc YAMLDoc" id="inline_script-run" markdown="1">

## [function __inline\_script\.run__\(\)](#function-__inline_scriptrun__) {#function-__inline_scriptrun__}

Executes the run script. The code that you enter in the 'run' tab of an inline_script item in the GUI is used as a body for this function.

</div>

[inline_script.run]: #inline_script-run
[run]: #inline_script-run

<div class="FunctionDoc YAMLDoc" id="inline_script-sanitize" markdown="1">

## [function __inline\_script\.sanitize__\(s, strict=False, allow\_vars=True\)](#function-__inline_scriptsanitize__s-strictfalse-allow_varstrue) {#function-__inline_scriptsanitize__s-strictfalse-allow_varstrue}

Removes invalid characters (notably quotes) from the string.

__Example:__

{% highlight python %}
# Prints 'Universit Aix-Marseille'
print(self.sanitize('"Université Aix-Marseille"'))
# Prints 'UniversitAixMarseille'
print(self.sanitize('"Université Aix-Marseille""', strict=True))
{% endhighlight %}

__Arguments:__

- `s` -- The string to be sanitized. This can be any type, but if it is not unicode, it will be coerced to unicode.

__Keywords:__

- `strict` -- If True, all except underscores and alphanumeric characters are stripped.
	- Type: bool
	- Default: False
- `allow_vars` -- If True, square brackets are not sanitized, so you can use variables.
	- Type: bool
	- Default: True

__Returns:__

A sanitized string.

- Type: unicode

</div>

[inline_script.sanitize]: #inline_script-sanitize
[sanitize]: #inline_script-sanitize

<div class="FunctionDoc YAMLDoc" id="inline_script-set" markdown="1">

## [function __inline\_script\.set__\(var, val\)](#function-__inline_scriptset__var-val) {#function-__inline_scriptset__var-val}

Sets an OpenSesame variable.

If you want to set a variable so that it is available in other items
as well (such as the logger item, so you can log the variable), you
need to use the set() function from the experiment. So, in an
inline_script item you would generally set a variable with
exp.set(), rather than self.set().

__Important note:__

You can only set simple variable types (unicode, float, and int).
If you use the set function to save another type of variable, it
will be converted to a unicode representation.

__Example:__

{% highlight python %}
exp.set('my_timestamp', self.time())
{% endhighlight %}

__Arguments:__

- `var` -- The name of an experimental variable.
	- Type: str, unicode
- `val` -- A value.

</div>

[inline_script.set]: #inline_script-set
[set]: #inline_script-set

<div class="FunctionDoc YAMLDoc" id="inline_script-set_response" markdown="1">

## [function __inline\_script\.set\_response__\(response=None, response\_time=None, correct=None\)](#function-__inline_scriptset_response__responsenone-response_timenone-correctnone) {#function-__inline_scriptset_response__responsenone-response_timenone-correctnone}

Processes a response in such a way that feedback variables are updated as well.

__Example:__

{% highlight python %}
from openexp.keyboard import keyboard
my_keyboard = keyboard(exp)
t1 = self.time()
button, timestamp = my_keyboard.get_key()
if button == 'left':
        correct = 1
else:
        correct = 0
rt = timestamp - t1
self.set_response(response=button, response_time=rt,
        correct=correct)
{% endhighlight %}

__Keywords:__

- `response` -- The response value.
	- Default: None
- `response_time` -- The response time, or None.
	- Type: int, float, NoneType
	- Default: None
- `correct` -- The correctness value, which should be 0, 1, True, False, or None.
	- Type: int, bool, NoneType
	- Default: None

</div>

[inline_script.set_response]: #inline_script-set_response
[set_response]: #inline_script-set_response

<div class="FunctionDoc YAMLDoc" id="inline_script-sleep" markdown="1">

## [function __inline\_script\.sleep__\(ms\)](#function-__inline_scriptsleep__ms) {#function-__inline_scriptsleep__ms}

Sleeps for a specified duration.

__Example:__

{% highlight python %}
self.sleep(1000) # Sleeps one second
{% endhighlight %}

__Arguments:__

- `ms` -- An value specifying the duration in milliseconds.
	- Type: int, float

</div>

[inline_script.sleep]: #inline_script-sleep
[sleep]: #inline_script-sleep

<div class="FunctionDoc YAMLDoc" id="inline_script-time" markdown="1">

## [function __inline\_script\.time__\(\)](#function-__inline_scripttime__) {#function-__inline_scripttime__}

Returns a timestamp for the current time. This timestamp only has a relative meaning, i.e. you can use it to determine the interval between two moments, but not the actual time. Whether the timestamp is a `float` or `int` depends on the back-end.

__Example:__

{% highlight python %}
print('The time is %s' % self.time())
{% endhighlight %}

__Returns:__

A timestamp of the current time.

- Type: int, float

</div>

[inline_script.time]: #inline_script-time
[time]: #inline_script-time

<div class="FunctionDoc YAMLDoc" id="inline_script-unistr" markdown="1">

## [function __inline\_script\.unistr__\(val\)](#function-__inline_scriptunistr__val) {#function-__inline_scriptunistr__val}

Converts a value to a unicode string. This function is mostly
necessary to make sure that normal strings with special characters
are correctly encoded into unicode, and don't result in TypeErrors.

The conversion logic is as follows:

- unicode values are returned unchanged.
- str values are decoded using utf-8.
- all other types are typecast to unicode, assuming utf-8 encoding
  where applicable.

__Arguments:__

- `val` -- A value of any type.

__Returns:__

A unicode string.

- Type: unicode

</div>

[inline_script.unistr]: #inline_script-unistr
[unistr]: #inline_script-unistr

<div class="FunctionDoc YAMLDoc" id="inline_script-unset" markdown="1">

## [function __inline\_script\.unset__\(var\)](#function-__inline_scriptunset__var) {#function-__inline_scriptunset__var}

Unsets (forgets) an OpenSesame variable.

__Example:__

{% highlight python %}
self.set('var', 'Hello world!')
print(self.get('var')) # Prints 'Hello world!'
self.unset('variable_to_forget')
print(self.get('var')) # Gives error!
{% endhighlight %}

__Arguments:__

- `var` -- The name of an OpenSesame variable.
	- Type: str, unicode

</div>

[inline_script.unset]: #inline_script-unset
[unset]: #inline_script-unset

<div class="FunctionDoc YAMLDoc" id="inline_script-usanitize" markdown="1">

## [function __inline\_script\.usanitize__\(s, strict=False\)](#function-__inline_scriptusanitize__s-strictfalse) {#function-__inline_scriptusanitize__s-strictfalse}

Converts all non-ASCII characters to U+XXXX notation, so that the resulting string can be treated as plain ASCII text.

__Arguments:__

- `s` -- A unicode string to be santized
	- Type: unicode

__Keywords:__

- `strict` -- If True, special characters are ignored rather than recoded.
	- Type: bool
	- Default: False

__Returns:__

A regular Python string with all special characters replaced by U+XXXX notation or ignored (if strict).

- Type: str

</div>

[inline_script.usanitize]: #inline_script-usanitize
[usanitize]: #inline_script-usanitize

</div>

[inline_script]: #inline_script


[function __inline\_script\.auto\_type__\(val\)]: #function-__inline_scriptauto_type__val
[function __inline\_script\.color\_check__\(col\)]: #function-__inline_scriptcolor_check__col
[function __inline\_script\.copy\_sketchpad__\(sketchpad\_name\)]: #function-__inline_scriptcopy_sketchpad__sketchpad_name
[function __inline\_script\.eval\_text__\(text, soft\_ignore=False, round\_float=False, quote\_str=False\)]: #function-__inline_scripteval_text__text-soft_ignorefalse-round_floatfalse-quote_strfalse
[function __inline\_script\.flush\_log__\(\)]: #function-__inline_scriptflush_log__
[function __inline\_script\.from\_string__\(string\)]: #function-__inline_scriptfrom_string__string
[function __inline\_script\.get__\(var, \_eval=True\)]: #function-__inline_scriptget__var-_evaltrue
[function __inline\_script\.get\_check__\(var, default=None, \_eval=True, valid=None\)]: #function-__inline_scriptget_check__var-defaultnone-_evaltrue-validnone
[function __inline\_script\.get\_refs__\(text\)]: #function-__inline_scriptget_refs__text
[function __inline\_script\.has__\(var\)]: #function-__inline_scripthas__var
[function __inline\_script\.log__\(msg\)]: #function-__inline_scriptlog__msg
[function __inline\_script\.offline\_canvas__\(auto\_prepare=True\)]: #function-__inline_scriptoffline_canvas__auto_preparetrue
[function __inline\_script\.prepare__\(\)]: #function-__inline_scriptprepare__
[function __inline\_script\.resolution__\(\)]: #function-__inline_scriptresolution__
[function __inline\_script\.run__\(\)]: #function-__inline_scriptrun__
[function __inline\_script\.sanitize__\(s, strict=False, allow\_vars=True\)]: #function-__inline_scriptsanitize__s-strictfalse-allow_varstrue
[function __inline\_script\.set__\(var, val\)]: #function-__inline_scriptset__var-val
[function __inline\_script\.set\_response__\(response=None, response\_time=None, correct=None\)]: #function-__inline_scriptset_response__responsenone-response_timenone-correctnone
[function __inline\_script\.sleep__\(ms\)]: #function-__inline_scriptsleep__ms
[function __inline\_script\.time__\(\)]: #function-__inline_scripttime__
[function __inline\_script\.unistr__\(val\)]: #function-__inline_scriptunistr__val
[function __inline\_script\.unset__\(var\)]: #function-__inline_scriptunset__var
[function __inline\_script\.usanitize__\(s, strict=False\)]: #function-__inline_scriptusanitize__s-strictfalse