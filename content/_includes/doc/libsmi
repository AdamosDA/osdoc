<div class='pydoc'>
<span class='class_name'>class <b>libsmi</b></span><br />
<p class='details'><b>Function overview:</b><br />
<a href='#libsmi.__init__'>__init__</a><br />
<a href='#libsmi.calibrate'>calibrate</a><br />
<a href='#libsmi.clear'>clear</a><br />
<a href='#libsmi.log'>log</a><br />
<a href='#libsmi.recv'>recv</a><br />
<a href='#libsmi.sample'>sample</a><br />
<a href='#libsmi.save_data'>save_data</a><br />
<a href='#libsmi.send'>send</a><br />
<a href='#libsmi.start_recording'>start_recording</a><br />
<a href='#libsmi.stop_recording'>stop_recording</a><br />
</p>
<div class='function'><span class='function_name'><a class='anchor' id='libsmi.__init__'>libsmi</a>.<b>__init__(experiment, port='COM1', baudrate=115200, sound=True)</b></span><div class='details'>
Initializes the SMI tracker class<br />
<br />
<span class='keyword'>Keyword arguments:</span>
<br />
<span class='variable'>port </span> &rarr;  the name of the serial port to which the tracker is attached (default = 'COM1')
<br />
<span class='variable'>baudrate </span> &rarr;  the baudrate of the serial port communications (default = 115200)
<br />
<span class='variable'>sound </span> &rarr;  indicates if sounds should be played to inidicate success or failure
<br />
</div></div>
<div class='function'><span class='function_name'><a class='anchor' id='libsmi.calibrate'>libsmi</a>.<b>calibrate(nr_of_pts=9)</b></span><div class='details'>
Performs calibration procedure<br />
<br />
<span class='keyword'>Keyword arguments:</span>
<br />
The number of points to be used for the validation (default=9)<br />
<br />
<span class='keyword'>Exceptions:</span>
<br />
Throws a runtime_error if the calibration fails<br />
</div></div>
<div class='function'><span class='function_name'><a class='anchor' id='libsmi.clear'>libsmi</a>.<b>clear()</b></span><div class='details'>
Clear the input buffer<br />
</div></div>
<div class='function'><span class='function_name'><a class='anchor' id='libsmi.log'>libsmi</a>.<b>log(msg)</b></span><div class='details'>
Write message (or remark) to the SMI logfile<br />
<br />
<span class='keyword'>Arguments:</span>
<br />
<span class='variable'>msg </span> &rarr;  a string containing the message
<br />
</div></div>
<div class='function'><span class='function_name'><a class='anchor' id='libsmi.recv'>libsmi</a>.<b>recv()</b></span><div class='details'>
Receive a message from the tracker<br />
<br />
<span class='keyword'>Returns:</span>
<br />
A message (the tab-linefeed is stripped off)<br />
</div></div>
<div class='function'><span class='function_name'><a class='anchor' id='libsmi.sample'>libsmi</a>.<b>sample(clear=False)</b></span><div class='details'>
Retrieve the current gaze position from the tracker. If binocular<br />
recording is enabled, return the left eye.<br />
<br />
<span class='keyword'>Keyword arguments:</span>
<br />
<span class='variable'>clear </span> &rarr;  indicates if the input buffer should be flushed so that an
<br />
up-to-date sample is returned (default=False)<br />
<br />
<span class='keyword'>Returns:</span>
<br />
An (x,y) tuple<br />
</div></div>
<div class='function'><span class='function_name'><a class='anchor' id='libsmi.save_data'>libsmi</a>.<b>save_data(path=None)</b></span><div class='details'>
Save the SMI datafile to disk<br />
<br />
<span class='keyword'>Keyword arguments:</span>
<br />
<span class='variable'>path </span> &rarr;  the name of the datafile or None for a default name (default=None)
<br />
</div></div>
<div class='function'><span class='function_name'><a class='anchor' id='libsmi.send'>libsmi</a>.<b>send(msg, sleep=10)</b></span><div class='details'>
Send a message to the tracker<br />
<br />
<span class='keyword'>Arguments:</span>
<br />
<span class='variable'>msg </span> &rarr;  a string containing the message
<br />
<br />
<span class='keyword'>Keyword arguments:</span>
<br />
<span class='variable'>sleep </span> &rarr;  a value in milliseconds to sleep after the command has been
<br />
sent to avoid overflowing (default=10)<br />
</div></div>
<div class='function'><span class='function_name'><a class='anchor' id='libsmi.start_recording'>libsmi</a>.<b>start_recording(stream=True)</b></span><div class='details'>
Start recording<br />
<br />
<span class='keyword'>Keyword arguments:</span>
<br />
<span class='variable'>stream </span> &rarr;  determines if samples should be streamed so they can be
<br />
accessed using the sample() function<br />
</div></div>
<div class='function'><span class='function_name'><a class='anchor' id='libsmi.stop_recording'>libsmi</a>.<b>stop_recording()</b></span><div class='details'>
Stop recording<br />
</div></div>
</div>