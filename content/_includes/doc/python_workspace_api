<div class="ModuleDoc YAMLDoc" id="libopensesame-python_workspace_api" markdown="1">

 

<div class="FunctionDoc YAMLDoc" id="canvas" markdown="1">

## function __canvas__\(\*arglist, \*\*kwdict\)

Creates a new `canvas` object. For a list of arguments and keywords, see the `canvas` documention.

__Example:__

{% highlight python %}
my_canvas = canvas()
{% endhighlight %}

__Argument list:__

- `*arglist`: No description.

__Keyword dict:__

- `**kwdict`: No description.

__Returns:__

A `canvas` object.

- Type: canvas

</div>

[canvas]: #canvas

<div class="FunctionDoc YAMLDoc" id="flush_log" markdown="1">

## function __flush\_log__\(\)

Forces any pending write operations to the log file to be written to disk.

__Example:__

{% highlight python %}
log('TRIAL FINISHED')
flush_log()
{% endhighlight %}

</div>

[flush_log]: #flush_log

<div class="FunctionDoc YAMLDoc" id="keyboard" markdown="1">

## function __keyboard__\(\*arglist, \*\*kwdict\)

Creates a new `keyboard` object. For a list of arguments and keywords, see the `keyboard` documention.

__Example:__

{% highlight python %}
my_keyboard = keyboard()
{% endhighlight %}

__Argument list:__

- `*arglist`: No description.

__Keyword dict:__

- `**kwdict`: No description.

__Returns:__

A `keyboard` object.

- Type: keyboard

</div>

[keyboard]: #keyboard

<div class="FunctionDoc YAMLDoc" id="log" markdown="1">

## function __log__\(msg\)

Writes a message to the log file. Note that using the `log()` function in combination with a `logger` item is usually a bad idea, because it results in messy log files.

__Example:__

{% highlight python %}
log('timestamp = %s' % time())
{% endhighlight %}

__Arguments:__

- `msg` -- A message. This can be any type and will we be converted to a (unicode) string.

</div>

[log]: #log

<div class="FunctionDoc YAMLDoc" id="mouse" markdown="1">

## function __mouse__\(\*arglist, \*\*kwdict\)

Creates a new `mouse` object. For a list of arguments and keywords, see the `mouse` documention.

__Example:__

{% highlight python %}
my_mouse = mouse()
{% endhighlight %}

__Argument list:__

- `*arglist`: No description.

__Keyword dict:__

- `**kwdict`: No description.

__Returns:__

A `mouse` object.

- Type: mouse

</div>

[mouse]: #mouse

<div class="FunctionDoc YAMLDoc" id="sampler" markdown="1">

## function __sampler__\(\*arglist, \*\*kwdict\)

Creates a new `sampler` object. For a list of arguments and keywords, see the `sampler` documention.

__Example:__

{% highlight python %}
my_sampler = sampler()
{% endhighlight %}

__Argument list:__

- `*arglist`: No description.

__Keyword dict:__

- `**kwdict`: No description.

__Returns:__

A `sampler` object.

- Type: sampler

</div>

[sampler]: #sampler

<div class="FunctionDoc YAMLDoc" id="set_response" markdown="1">

## function __set\_response__\(response=u'None', response\_time=u'None', correct=u'None'\)

Processes a response in such a way that feedback variables are updated as well.

__Example:__

{% highlight python %}
my_keyboard = keyboard()
t1 = time()
button, timestamp = my_keyboard.get_key()
if button == 'left':
        correct = 1
else:
        correct = 0
rt = timestamp - t1
set_response(response=button, response_time=rt, correct=correct)
{% endhighlight %}

__Keywords:__

- `response` -- The response value.
	- Default: None
- `response_time` -- The response time, or `None`.
	- Type: int, float, NoneType
	- Default: None
- `correct` -- The correctness value, which should be 0, 1, `True`, `False`, or `None`.
	- Type: int, bool, NoneType
	- Default: None

</div>

[set_response]: #set_response

<div class="FunctionDoc YAMLDoc" id="set_subject_nr" markdown="1">

## function __set\_subject\_nr__\(nr\)

Sets the subject number and parity (even/ odd). This function is called automatically when an experiment is started, so you only need to call it yourself if you overwrite the subject number that was specified when the experiment was launcherd.

__Example:__

{% highlight python %}
set_subject_nr(1)
print('Subject nr = %d' % var.subject_nr)
print('Subject parity = %s' % var.subject_parity)
{% endhighlight %}

__Arguments:__

- `nr` -- The subject nr.
	- Type: int

</div>

[set_subject_nr]: #set_subject_nr

<div class="FunctionDoc YAMLDoc" id="sleep" markdown="1">

## function __sleep__\(ms\)

Waits (sleeps) for a specified duration.

__Example:__

{% highlight python %}
sleep(1000) # Sleep one second
{% endhighlight %}

__Arguments:__

- `ms` -- An value specifying the duration in milliseconds.
	- Type: int, float

</div>

[sleep]: #sleep

<div class="FunctionDoc YAMLDoc" id="synth" markdown="1">

## function __synth__\(\*arglist, \*\*kwdict\)

Creates a new `synth` object. For a list of arguments and keywords, see the `synth` documention.

__Example:__

{% highlight python %}
my_synth = synth()
{% endhighlight %}

__Argument list:__

- `*arglist`: No description.

__Keyword dict:__

- `**kwdict`: No description.

__Returns:__

A `synth` object.

- Type: synth

</div>

[synth]: #synth

<div class="FunctionDoc YAMLDoc" id="time" markdown="1">

## function __time__\(\)

Returns a timestamp for the current time. This timestamp only has a relative meaning, i.e. you can use it to determine the interval between two moments, but not the actual time.

__Example:__

{% highlight python %}
print('The time is %s' % time())
{% endhighlight %}

__Returns:__

A timestamp of the current time.

- Type: float

</div>

[time]: #time

</div>

[libopensesame.python_workspace_api]: #libopensesame-python_workspace_api
[python_workspace_api]: #libopensesame-python_workspace_api

